# CS-300: Data Structures and Algorithms - Analysis and Design

## Project Overview
This repository contains my coursework for **CS-300: Data Structures and Algorithms - Analysis and Design**. The primary objective of this project was to develop a system capable of:

- **Sorting courses alphanumerically**.
- **Managing and displaying course prerequisites**.
- **Generating a sample academic schedule for students**.
- **Allowing users to select a course and view its prerequisites**.

---

## Problem Statement
The challenge was to design a program that efficiently organizes a list of college courses in alphanumeric order, accounts for their respective prerequisites, and provides functionalities for students to view and plan their academic schedules accordingly.

---

## Approach and Solution

### Initial Strategy
Initially, I implemented a **hash table** to store course information. While hash tables offer fast data retrieval, they lack inherent mechanisms for maintaining ordered data, which is crucial for tasks like sorting courses alphanumerically.

### Challenges Faced
The primary limitation of the hash table approach was its inability to maintain the required order of courses. To address this, I considered pre-sorting the input data manually, but this method was neither efficient nor scalable.

### Revised Strategy: Implementing a Binary Search Tree (BST)
To overcome the ordering issue, I transitioned to using a **Binary Search Tree (BST)**. BSTs are particularly suited for scenarios requiring dynamic data insertion and ordered traversal. In a BST:

- Each node contains a course.
- The left subtree holds courses that precede the parent node's course alphanumerically.
- The right subtree contains courses that follow the parent node's course alphanumerically.

This structure allowed for efficient insertion, deletion, and in-order traversal to retrieve courses in the desired sequence.

---

## Overcoming Challenges
Transitioning from a hash table to a BST was a significant shift. However, leveraging concepts from previous assignments facilitated this change. In instances where I encountered obstacles:

1. **Targeted Research:** I focused on specific issues rather than seeking complete solutions, ensuring a deeper understanding of the problem.
2. **Consultation:** Engaging with my professor provided clarity and alternative perspectives, enhancing my problem-solving approach.

---

## Impact on Software Design and Development
This project underscored the importance of selecting appropriate data structures based on problem requirements. Initially opting for a hash table highlighted the necessity of aligning data structures with desired functionalities. The shift to a BST not only resolved the ordering issue but also expanded my comprehension of:

- **Data Organization:** Recognizing how different structures influence data storage and retrieval.
- **Algorithm Efficiency:** Understanding the trade-offs between various data structures in terms of performance and scalability.

---

## Enhancing Code Maintainability and Readability
The assignments and projects in this course have significantly improved my ability to write clean, maintainable code. By:

- **Implementing structured data storage solutions:** I can now handle and manipulate extensive datasets effectively.
- **Prioritizing code clarity:** My programs have become more readable, facilitating easier debugging and collaboration.

This evolution reflects a transition from basic coding practices to more sophisticated, efficient methodologies.

---

## Conclusion
This project was instrumental in deepening my understanding of data structures and their practical applications. The experience gained has equipped me with the skills to select and implement appropriate data structures, enhancing both the functionality and efficiency of software solutions.
